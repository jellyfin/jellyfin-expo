// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HomeScreen should render ErrorView when invalid server exists 1`] = `
<RNCSafeAreaView
  edges={
    {
      "bottom": "off",
      "left": "additive",
      "right": "additive",
      "top": "off",
    }
  }
  style={
    {
      "backgroundColor": undefined,
      "flex": 1,
    }
  }
>
  <View
    style={
      {
        "backgroundColor": "#393e42",
        "height": 0,
      }
    }
  />
  <View
    style={
      {
        "backgroundColor": undefined,
        "bottom": 0,
        "flex": 1,
        "left": 0,
        "paddingHorizontal": 15,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      style={
        {
          "flexGrow": 1,
          "justifyContent": "center",
        }
      }
    >
      <View
        style={
          {
            "overflow": "hidden",
          }
        }
      >
        <View
          replaceTheme={[Function]}
          testID="error-view-icon"
          updateTheme={[Function]}
        >
          <View
            style={
              {
                "alignItems": "center",
                "backgroundColor": "transparent",
                "justifyContent": "center",
              }
            }
          >
            <Text />
          </View>
        </View>
      </View>
      <Text
        style={
          {
            "color": "#242424",
            "fontSize": 43.714285714285715,
            "marginVertical": 40,
            "textAlign": "center",
          }
        }
        testID="error-view-heading"
      >
        Server is invalid
      </Text>
      <Text
        style={
          {
            "color": "#242424",
            "marginBottom": 40,
            "marginHorizontal": 20,
            "textAlign": "center",
          }
        }
        testID="error-view-message"
      >
        Something has happened and the saved server information is invalid. Try removing the server from Settings and add it again.
      </Text>
    </View>
    <View
      testID="error-view-details"
    />
  </View>
</RNCSafeAreaView>
`;

exports[`HomeScreen should render correctly 1`] = `
<RNCSafeAreaView
  edges={
    {
      "bottom": "off",
      "left": "additive",
      "right": "additive",
      "top": "off",
    }
  }
  style={
    {
      "backgroundColor": undefined,
      "flex": 1,
    }
  }
>
  <View
    style={
      {
        "backgroundColor": "#393e42",
        "height": 0,
      }
    }
  />
  <NativeShellWebView
    containerStyle={
      [
        {
          "flex": 1,
        },
        {
          "opacity": 0,
        },
      ]
    }
    onContentProcessDidTerminate={[Function]}
    onError={[Function]}
    onHttpError={[Function]}
    onLoadEnd={[Function]}
    onLoadStart={[Function]}
    refreshControlProps={
      {
        "backgroundColor": "#393e42",
        "colors": [
          "#2089dc",
          "#ca71eb",
        ],
        "progressBackgroundColor": undefined,
        "tintColor": "#43484d",
      }
    }
    renderError={[Function]}
    renderLoading={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        {
          "opacity": 0,
        },
      ]
    }
  />
  <View
    style={
      [
        {
          "overflow": "hidden",
          "pointerEvents": "box-none",
        },
        undefined,
      ]
    }
  >
    <ViewManagerAdapter_ExpoVideoView
      onError={[Function]}
      onFullscreenUpdate={[Function]}
      onLoad={[Function]}
      onLoadStart={[Function]}
      onReadyForDisplay={[Function]}
      onStatusUpdate={[Function]}
      resizeMode="mock"
      status={{}}
      style={
        [
          {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          },
          undefined,
        ]
      }
      useNativeControls={true}
      videoStyle={
        [
          {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          },
          undefined,
        ]
      }
    />
    <Image
      source={
        {
          "uri": undefined,
        }
      }
      style={
        [
          {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "resizeMode": "contain",
            "right": 0,
            "top": 0,
          },
          undefined,
        ]
      }
    />
  </View>
</RNCSafeAreaView>
`;

exports[`HomeScreen should render null when no servers are present 1`] = `null`;
